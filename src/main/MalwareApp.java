package main;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.SwingConstants;

import model.Character;

import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

public class MalwareApp {

	private JFrame frame;
	private int[] num;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MalwareApp window = new MalwareApp();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MalwareApp() {
		loadBytes();
		initialize();
	}

	/**
	 * Loads bytes of path file
	 */
	public void loadBytes() {
		try {
			// Set reader to path location
			BufferedReader br = new BufferedReader(
					new InputStreamReader(new FileInputStream(Constants.PATH), Constants.CHARSET));
			// Initialize character array
			char[] bytes = new char[Constants.BYTE];
			// Read each byte in file to character array
			br.read(bytes);

			// Convert to int array
			num = new int[bytes.length];
			for (int i = 0; i < bytes.length; i++) {
				num[i] = bytes[i];
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Overload function Get value at a specific offset location for values that
	 * only take up one bit
	 * 
	 * @return location
	 */
	public int getAmount(int offset) {
		return num[offset];
	}

	/**
	 * Overload function Get value at a specific offset location for values that
	 * take up multiple bits
	 * 
	 * @return location
	 */
	public int getAmount(int[] offset) {
		return bigEndianInt(num[offset[0]], num[offset[1]]);
	}

	/**
	 * Get characters from bit file
	 * 
	 * @return list of characters
	 */
	public List<Character> getCharacters() {
		List<Character> characters = new ArrayList<Character>();

		int i = 0;

		// Repeat while amount of characters are less than 16
		while (i < Constants.CHARACTER_LENGTH) {
			Character character = new Character();
			// Get offset for character and initialize character to values
			character.Offset = i;
			character.Name = getCharacterName(Arrays.copyOfRange(num, Constants.NAME[0] + Constants.CHARACTER_BYTES * i,
					Constants.NAME[1] + Constants.CHARACTER_BYTES * i));
			character.Str = num[Constants.STR + Constants.CHARACTER_BYTES * i];
			character.Dex = num[Constants.DEX + Constants.CHARACTER_BYTES * i];
			character.Int = num[Constants.INT + Constants.CHARACTER_BYTES * i];
			character.Hp = bigEndianInt(num[Constants.HP[0] + Constants.CHARACTER_BYTES * i],
					num[Constants.HP[1] + Constants.CHARACTER_BYTES * i]);
			character.MaxHp = bigEndianInt(num[Constants.MAXHP[0] + Constants.CHARACTER_BYTES * i],
					num[Constants.MAXHP[1] + Constants.CHARACTER_BYTES * i]);
			character.Exp = bigEndianInt(num[Constants.EXP[0] + Constants.CHARACTER_BYTES * i],
					num[Constants.EXP[1] + Constants.CHARACTER_BYTES * i]);

			characters.add(character);
			i++;
		}

		return characters;

	}

	/**
	 * Converts int array to char array
	 * 
	 * @param a
	 *              int array
	 * @return char array
	 */
	private char[] intArrayToCharArray(int[] a) {
		char[] array = new char[a.length];
		for (int i = 0; i < a.length; i++) {
			// this converts a integer into a character
			array[i] = (char) a[i];
		}

		return array;
	}

	/**
	 * Gets character name
	 * 
	 * @param a
	 *              int array for character name
	 * @return string value of name
	 */
	private String getCharacterName(int[] a) {
		char[] array = new char[a.length];
		for (int i = 0; i < a.length; i++) {
			// this converts a integer into a character
			array[i] = (char) a[i];
		}
		return String.valueOf(array);
	}

	/**
	 * Convert littleEndian int value to bigEndian int value
	 * @param a int array
	 * @return bigEndian int
	 */
	private int bigEndianInt(int a, int b) {
		String hex = "0x";

		String msb = Integer.toHexString(b);
		if (msb.length() == 1) {
			msb = "0" + msb;
		}
		String lsb = Integer.toHexString(a);
		if (lsb.length() == 1) {
			lsb = "0" + lsb;
		}

		hex += msb + lsb;

		return Integer.decode(hex);
	}

	/**
	 * Convert littleEndian int value to bigEndian int value
	 * @param value
	 * @return littleEndian int
	 */
	private int[] littleEndianInt(String value) {

		String HexValue = Integer.toHexString(Integer.parseInt(value.trim()));

		// If value isn't 2 bytes, extend size by adding leading zeroes until length of 4
		while (HexValue.length() < 4) {
			HexValue = "0" + HexValue;
		}

		// Declare most & least significant bits
		String msb = "0x" + HexValue.substring(2);
		String lsb = "0x" + HexValue.substring(0, 2);

		int[] ints = new int[2];

		// Get int values for hex
		ints[0] = Integer.decode(msb);
		ints[1] = Integer.decode(lsb);

		return ints;
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 345, 493);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);

		JLabel lblLetsHackUltima = new JLabel("Let's hack Ultima V!");
		lblLetsHackUltima.setFont(new Font("Lucida Grande", Font.PLAIN, 12));
		lblLetsHackUltima.setHorizontalAlignment(SwingConstants.CENTER);
		lblLetsHackUltima.setBounds(97, 18, 137, 16);
		frame.getContentPane().add(lblLetsHackUltima);

		JFormattedTextField StrTextField = new JFormattedTextField();
		StrTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		StrTextField.setBounds(89, 129, 60, 26);
		frame.getContentPane().add(StrTextField);

		JFormattedTextField IntTextField = new JFormattedTextField();
		IntTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		IntTextField.setBounds(89, 156, 60, 26);
		frame.getContentPane().add(IntTextField);

		JFormattedTextField DexTextField = new JFormattedTextField();
		DexTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		DexTextField.setBounds(89, 184, 60, 26);
		frame.getContentPane().add(DexTextField);

		JLabel lblNewLabel = new JLabel("STR");
		lblNewLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblNewLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		lblNewLabel.setBounds(37, 134, 40, 16);
		frame.getContentPane().add(lblNewLabel);

		JLabel lblInt = new JLabel("INT");
		lblInt.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblInt.setHorizontalAlignment(SwingConstants.RIGHT);
		lblInt.setBounds(37, 161, 40, 16);
		frame.getContentPane().add(lblInt);

		JLabel lblDex = new JLabel("DEX");
		lblDex.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblDex.setHorizontalAlignment(SwingConstants.RIGHT);
		lblDex.setBounds(37, 189, 40, 16);
		frame.getContentPane().add(lblDex);

		JLabel lblMp = new JLabel("MP");
		lblMp.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblMp.setHorizontalAlignment(SwingConstants.RIGHT);
		lblMp.setBounds(162, 161, 40, 16);
		frame.getContentPane().add(lblMp);

		JLabel lblHp = new JLabel("HP");
		lblHp.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblHp.setHorizontalAlignment(SwingConstants.RIGHT);
		lblHp.setBounds(162, 134, 40, 16);
		frame.getContentPane().add(lblHp);

		JFormattedTextField HpTextField = new JFormattedTextField();
		HpTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		HpTextField.setBounds(214, 129, 60, 26);
		frame.getContentPane().add(HpTextField);

		JFormattedTextField MpTextField = new JFormattedTextField();
		MpTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		MpTextField.setBounds(214, 156, 60, 26);
		frame.getContentPane().add(MpTextField);

		JLabel lblGold = new JLabel("GOLD");
		lblGold.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblGold.setHorizontalAlignment(SwingConstants.CENTER);
		lblGold.setBounds(40, 275, 75, 16);
		frame.getContentPane().add(lblGold);

		JLabel lblExp = new JLabel("EXP");
		lblExp.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblExp.setHorizontalAlignment(SwingConstants.RIGHT);
		lblExp.setBounds(161, 189, 40, 16);
		frame.getContentPane().add(lblExp);

		JFormattedTextField ExpTextField = new JFormattedTextField();
		ExpTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		ExpTextField.setBounds(214, 184, 60, 26);
		frame.getContentPane().add(ExpTextField);

		JFormattedTextField GoldTextField = new JFormattedTextField();
		GoldTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		GoldTextField.setBounds(40, 290, 75, 26);
		frame.getContentPane().add(GoldTextField);
		GoldTextField.setText("" + getAmount(Constants.GOLD));

		JLabel lblNewLabel_1 = new JLabel("Select a character to change their stats.");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_1.setFont(new Font("Lucida Grande", Font.PLAIN, 11));
		lblNewLabel_1.setBounds(44, 58, 257, 16);
		frame.getContentPane().add(lblNewLabel_1);

		JComboBox<Character> CharacterComboBox = new JComboBox<Character>();
		CharacterComboBox.setFont(new Font("Dialog", Font.PLAIN, 11));
		List<Character> characters = getCharacters();
		for (Character c : characters) {
			CharacterComboBox.addItem(c);
		}
		CharacterComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Character selectedChar = (Character) CharacterComboBox.getSelectedItem();
				StrTextField.setText("" + selectedChar.Str);
				IntTextField.setText("" + selectedChar.Int);
				DexTextField.setText("" + selectedChar.Dex);
				HpTextField.setText("" + selectedChar.Hp);
				MpTextField.setText("" + selectedChar.MaxHp);
				ExpTextField.setText("" + selectedChar.Exp);
			}
		});
		CharacterComboBox.setSelectedIndex(0);
		CharacterComboBox.setBounds(97, 86, 140, 27);
		frame.getContentPane().add(CharacterComboBox);

		JLabel lblSkullKeys = new JLabel("SKULL KEYS");
		lblSkullKeys.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblSkullKeys.setHorizontalAlignment(SwingConstants.CENTER);
		lblSkullKeys.setBounds(87, 321, 75, 16);
		frame.getContentPane().add(lblSkullKeys);

		JFormattedTextField SkullKeysTextField = new JFormattedTextField();
		SkullKeysTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		SkullKeysTextField.setBounds(87, 335, 75, 26);
		frame.getContentPane().add(SkullKeysTextField);
		SkullKeysTextField.setText("" + getAmount(Constants.SKULL_KEY));

		JLabel lblKeys = new JLabel("KEYS");
		lblKeys.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblKeys.setHorizontalAlignment(SwingConstants.CENTER);
		lblKeys.setBounds(129, 275, 75, 16);
		frame.getContentPane().add(lblKeys);

		JFormattedTextField KeysTextField = new JFormattedTextField();
		KeysTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		KeysTextField.setBounds(128, 290, 75, 26);
		frame.getContentPane().add(KeysTextField);
		KeysTextField.setText("" + getAmount(Constants.KEY));

		JLabel lblMagic = new JLabel("MAGIC AXES");
		lblMagic.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblMagic.setHorizontalAlignment(SwingConstants.CENTER);
		lblMagic.setBounds(174, 361, 75, 16);
		frame.getContentPane().add(lblMagic);

		JFormattedTextField MagicAxesTextField = new JFormattedTextField();
		MagicAxesTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		MagicAxesTextField.setBounds(174, 375, 75, 26);
		frame.getContentPane().add(MagicAxesTextField);
		MagicAxesTextField.setText("" + getAmount(Constants.MAGIC_AXE));

		JLabel lblMagicCarpet = new JLabel("MAGIC CARPET");
		lblMagicCarpet.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblMagicCarpet.setHorizontalAlignment(SwingConstants.CENTER);
		lblMagicCarpet.setBounds(87, 361, 75, 16);
		frame.getContentPane().add(lblMagicCarpet);

		JFormattedTextField MagicCarpetTextField = new JFormattedTextField();
		MagicCarpetTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		MagicCarpetTextField.setBounds(87, 375, 75, 26);
		frame.getContentPane().add(MagicCarpetTextField);
		MagicCarpetTextField.setText("" + getAmount(Constants.MAGIC_CARPET));

		JLabel lblGem = new JLabel("GEMS");
		lblGem.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblGem.setHorizontalAlignment(SwingConstants.CENTER);
		lblGem.setBounds(215, 276, 75, 16);
		frame.getContentPane().add(lblGem);

		JFormattedTextField GemsTextField = new JFormattedTextField();
		GemsTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		GemsTextField.setBounds(215, 290, 75, 26);
		frame.getContentPane().add(GemsTextField);
		GemsTextField.setText("" + getAmount(Constants.GEMS));

		JLabel lblBlackBadge = new JLabel("BLACK BADGE");
		lblBlackBadge.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
		lblBlackBadge.setHorizontalAlignment(SwingConstants.CENTER);
		lblBlackBadge.setBounds(174, 321, 75, 16);
		frame.getContentPane().add(lblBlackBadge);

		JFormattedTextField BlackBadgeTextField = new JFormattedTextField();
		BlackBadgeTextField.setFont(new Font("Dialog", Font.PLAIN, 11));
		BlackBadgeTextField.setBounds(174, 335, 75, 26);
		frame.getContentPane().add(BlackBadgeTextField);
		BlackBadgeTextField.setText("" + getAmount(Constants.BLACK_BADGE));

		
		// Save values to file
		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// Save character stats
				int index = CharacterComboBox.getSelectedIndex();
				num[Constants.STR + Constants.CHARACTER_BYTES * index] = Integer.parseInt(StrTextField.getText());
				num[Constants.DEX + Constants.CHARACTER_BYTES * index] = Integer.parseInt(DexTextField.getText());
				num[Constants.INT + Constants.CHARACTER_BYTES * index] = Integer.parseInt(IntTextField.getText());
				int[] MaxHpCount = littleEndianInt(MpTextField.getText());
				num[Constants.MAXHP[0] + Constants.CHARACTER_BYTES * index] = MaxHpCount[0];
				num[Constants.MAXHP[1] + Constants.CHARACTER_BYTES * index] = MaxHpCount[1];

				int[] ExpCount = littleEndianInt(ExpTextField.getText());
				num[Constants.EXP[0] + Constants.CHARACTER_BYTES * index] = ExpCount[0];
				num[Constants.EXP[1] + Constants.CHARACTER_BYTES * index] = ExpCount[1];

				// Get new numbers for items
				int[] GoldCount = littleEndianInt(GoldTextField.getText());
				num[Constants.GOLD[0]] = GoldCount[0];
				num[Constants.GOLD[1]] = GoldCount[1];

				int SkullKeyCount = Integer.parseInt(SkullKeysTextField.getText());
				num[Constants.SKULL_KEY] = SkullKeyCount;

				int KeyCount = Integer.parseInt(KeysTextField.getText());
				num[Constants.KEY] = KeyCount;

				int AxeCount = Integer.parseInt(MagicAxesTextField.getText());
				num[Constants.MAGIC_AXE] = AxeCount;

				int CarpetCount = Integer.parseInt(MagicCarpetTextField.getText());
				num[Constants.MAGIC_CARPET] = CarpetCount;

				int GemCount = Integer.parseInt(GemsTextField.getText());
				num[Constants.GEMS] = GemCount;

				int BlackBadgeCount = Integer.parseInt(BlackBadgeTextField.getText());
				num[Constants.BLACK_BADGE] = BlackBadgeCount;

				// Save to file
				char[] test = intArrayToCharArray(num);
				byte[] test2;
				try {
					test2 = new String(test).getBytes(Constants.CHARSET);
					Path path = Paths.get(Constants.PATH);
					Files.write(path, test2);
				} catch (UnsupportedEncodingException e1) {
					e1.printStackTrace();
				} catch (IOException e1) {
					e1.printStackTrace();
				}

				System.out.println("Complete");
			}
		});
		btnSave.setFont(new Font("Dialog", Font.PLAIN, 11));
		btnSave.setBounds(117, 425, 117, 29);
		frame.getContentPane().add(btnSave);
	}
}
